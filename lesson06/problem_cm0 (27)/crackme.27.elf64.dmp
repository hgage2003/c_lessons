
./crackme.27.elf64.x:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    rsp,0x8
    1008:	48 8b 05 d9 2f 00 00 	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   rax,rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   rax
    1016:	48 83 c4 08          	add    rsp,0x8
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 6a 2f 00 00    	push   QWORD PTR [rip+0x2f6a]        # 3f90 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 6b 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f6b]        # 3f98 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nop    DWORD PTR [rax]
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <.plt>
    109f:	90                   	nop

Disassembly of section .plt.got:

00000000000010a0 <__cxa_finalize@plt>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	f2 ff 25 4d 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f4d]        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10ab:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000010b0 <abort@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 e5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ee5]        # 3fa0 <abort@GLIBC_2.2.5>
    10bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010c0 <__stack_chk_fail@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 dd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2edd]        # 3fa8 <__stack_chk_fail@GLIBC_2.4>
    10cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010d0 <__assert_fail@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 d5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ed5]        # 3fb0 <__assert_fail@GLIBC_2.2.5>
    10db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010e0 <__printf_chk@plt>:
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	f2 ff 25 cd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ecd]        # 3fb8 <__printf_chk@GLIBC_2.3.4>
    10eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010f0 <__isoc99_scanf@plt>:
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	f2 ff 25 c5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ec5]        # 3fc0 <__isoc99_scanf@GLIBC_2.7>
    10fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001100 <fwrite@plt>:
    1100:	f3 0f 1e fa          	endbr64 
    1104:	f2 ff 25 bd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ebd]        # 3fc8 <fwrite@GLIBC_2.2.5>
    110b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001110 <__fprintf_chk@plt>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	f2 ff 25 b5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2eb5]        # 3fd0 <__fprintf_chk@GLIBC_2.3.4>
    111b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000001120 <_start>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	31 ed                	xor    ebp,ebp
    1126:	49 89 d1             	mov    r9,rdx
    1129:	5e                   	pop    rsi
    112a:	48 89 e2             	mov    rdx,rsp
    112d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    1131:	50                   	push   rax
    1132:	54                   	push   rsp
    1133:	4c 8d 05 86 02 00 00 	lea    r8,[rip+0x286]        # 13c0 <__libc_csu_fini>
    113a:	48 8d 0d 0f 02 00 00 	lea    rcx,[rip+0x20f]        # 1350 <__libc_csu_init>
    1141:	48 8d 3d c1 00 00 00 	lea    rdi,[rip+0xc1]        # 1209 <main>
    1148:	ff 15 92 2e 00 00    	call   QWORD PTR [rip+0x2e92]        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    114e:	f4                   	hlt    
    114f:	90                   	nop

0000000000001150 <deregister_tm_clones>:
    1150:	48 8d 3d c9 2e 00 00 	lea    rdi,[rip+0x2ec9]        # 4020 <stdout@GLIBC_2.2.5>
    1157:	48 8d 05 c2 2e 00 00 	lea    rax,[rip+0x2ec2]        # 4020 <stdout@GLIBC_2.2.5>
    115e:	48 39 f8             	cmp    rax,rdi
    1161:	74 15                	je     1178 <deregister_tm_clones+0x28>
    1163:	48 8b 05 6e 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e6e]        # 3fd8 <_ITM_deregisterTMCloneTable>
    116a:	48 85 c0             	test   rax,rax
    116d:	74 09                	je     1178 <deregister_tm_clones+0x28>
    116f:	ff e0                	jmp    rax
    1171:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1178:	c3                   	ret    
    1179:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001180 <register_tm_clones>:
    1180:	48 8d 3d 99 2e 00 00 	lea    rdi,[rip+0x2e99]        # 4020 <stdout@GLIBC_2.2.5>
    1187:	48 8d 35 92 2e 00 00 	lea    rsi,[rip+0x2e92]        # 4020 <stdout@GLIBC_2.2.5>
    118e:	48 29 fe             	sub    rsi,rdi
    1191:	48 89 f0             	mov    rax,rsi
    1194:	48 c1 ee 3f          	shr    rsi,0x3f
    1198:	48 c1 f8 03          	sar    rax,0x3
    119c:	48 01 c6             	add    rsi,rax
    119f:	48 d1 fe             	sar    rsi,1
    11a2:	74 14                	je     11b8 <register_tm_clones+0x38>
    11a4:	48 8b 05 45 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e45]        # 3ff0 <_ITM_registerTMCloneTable>
    11ab:	48 85 c0             	test   rax,rax
    11ae:	74 08                	je     11b8 <register_tm_clones+0x38>
    11b0:	ff e0                	jmp    rax
    11b2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    11b8:	c3                   	ret    
    11b9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000011c0 <__do_global_dtors_aux>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	80 3d 7d 2e 00 00 00 	cmp    BYTE PTR [rip+0x2e7d],0x0        # 4048 <completed.8055>
    11cb:	75 2b                	jne    11f8 <__do_global_dtors_aux+0x38>
    11cd:	55                   	push   rbp
    11ce:	48 83 3d 22 2e 00 00 	cmp    QWORD PTR [rip+0x2e22],0x0        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    11d5:	00 
    11d6:	48 89 e5             	mov    rbp,rsp
    11d9:	74 0c                	je     11e7 <__do_global_dtors_aux+0x27>
    11db:	48 8b 3d 26 2e 00 00 	mov    rdi,QWORD PTR [rip+0x2e26]        # 4008 <__dso_handle>
    11e2:	e8 b9 fe ff ff       	call   10a0 <__cxa_finalize@plt>
    11e7:	e8 64 ff ff ff       	call   1150 <deregister_tm_clones>
    11ec:	c6 05 55 2e 00 00 01 	mov    BYTE PTR [rip+0x2e55],0x1        # 4048 <completed.8055>
    11f3:	5d                   	pop    rbp
    11f4:	c3                   	ret    
    11f5:	0f 1f 00             	nop    DWORD PTR [rax]
    11f8:	c3                   	ret    
    11f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001200 <frame_dummy>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	e9 77 ff ff ff       	jmp    1180 <register_tm_clones>

0000000000001209 <main>:
    1209:	f3 0f 1e fa          	endbr64 
    120d:	48 83 ec 18          	sub    rsp,0x18                  # reserve 24 bytes in stack
    1211:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28     # rax = *?
    1218:	00 00 
    121a:	48 89 44 24 08       	mov    QWORD PTR [rsp+0x8],rax   # save rax to stack[-1]
    121f:	31 c0                	xor    eax,eax                   # eax = 0
    1221:	48 8d 35 dc 0d 00 00 	lea    rsi,[rip+0xddc]           # 2004 "Input code: 0x"
    1228:	bf 01 00 00 00       	mov    edi,0x1                   # edi = 1
    122d:	e8 ae fe ff ff       	call   10e0 <__printf_chk@plt>   # __printf_chk(1, "Input code: 0x")
    1232:	48 8d 74 24 04       	lea    rsi,[rsp+0x4]
    1237:	48 8d 3d db 0d 00 00 	lea    rdi,[rip+0xddb]           # 2019 "%x"
    123e:	b8 00 00 00 00       	mov    eax,0x0
    1243:	e8 a8 fe ff ff       	call   10f0 <__isoc99_scanf@plt> # scanf("%x", rsp[1])
    1248:	83 f8 01             	cmp    eax,0x1                   # if res != 1
    124b:	75 6a                	jne    12b7 <main+0xae>          # goto 12b7
    124d:	8b 54 24 04          	mov    edx,DWORD PTR [rsp+0x4]   # edx = rsp[1] // in
    1251:	8b 05 c1 2d 00 00    	mov    eax,DWORD PTR [rip+0x2dc1]        # 4018 orig_code = 0x5e584eea <<<<<<<<<<<<<<<<<<<< code
    1257:	89 d1                	mov    ecx,edx                   # ecx = in
    1259:	31 c1                	xor    ecx,eax                   # in = in xor code
    125b:	84 c9                	test   cl,cl
    125d:	75 77                	jne    12d6 <main+0xcd>
    125f:	39 c2                	cmp    edx,eax
    1261:	0f 82 98 00 00 00    	jb     12ff <main+0xf6>
    1267:	0f 85 bb 00 00 00    	jne    1328 <main+0x11f>
    126d:	8b 0d 9d 2d 00 00    	mov    ecx,DWORD PTR [rip+0x2d9d]        # 4010 <treasure_number_p2> ecx = 0xe6e8 
    1273:	c1 e1 10             	shl    ecx,0x10                          # ecx = 0xe6e80000
    1276:	0b 0d 98 2d 00 00    	or     ecx,DWORD PTR [rip+0x2d98]        # 4014 <treasure_number_p1> ecx |= 0x3941 == 0xe6e83941 <<<<< treasure
    127c:	48 8d 15 d6 0d 00 00 	lea    rdx,[rip+0xdd6]                   # 2059 "Treasure: 0x%x"
    1283:	be 01 00 00 00       	mov    esi,0x1
    1288:	48 8b 3d 91 2d 00 00 	mov    rdi,QWORD PTR [rip+0x2d91] # 4020 <stdout@GLIBC_2.2.5>
    128f:	b8 00 00 00 00       	mov    eax,0x0
    1294:	e8 77 fe ff ff       	call   1110 <__fprintf_chk@plt>
    1299:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]  # restore rax from stack
    129e:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    12a5:	00 00 
    12a7:	0f 85 9d 00 00 00    	jne    134a <main+0x141>
    12ad:	b8 00 00 00 00       	mov    eax,0x0
    12b2:	48 83 c4 18          	add    rsp,0x18                 # un-reserve 24 bytes from stack
    12b6:	c3                   	ret                             # return
    12b7:	48 8d 0d be 0d 00 00 	lea    rcx,[rip+0xdbe]          # 207c main
    12be:	ba 0e 00 00 00       	mov    edx,0xe
    12c3:	48 8d 35 52 0d 00 00 	lea    rsi,[rip+0xd52]          # 201c problem_cm0.c
    12ca:	48 8d 3d 59 0d 00 00 	lea    rdi,[rip+0xd59]          # 202a res == 1
    12d1:	e8 fa fd ff ff       	call   10d0 <__assert_fail@plt>
    12d6:	48 8d 0d 56 0d 00 00 	lea    rcx,[rip+0xd56]          # 2033 "You are looser!"
    12dd:	48 8d 15 64 0d 00 00 	lea    rdx,[rip+0xd64]          # 2048 "%s"
    12e4:	be 01 00 00 00       	mov    esi,0x1
    12e9:	48 8b 3d 50 2d 00 00 	mov    rdi,QWORD PTR [rip+0x2d50]        # 4040 <stderr@GLIBC_2.2.5>
    12f0:	b8 00 00 00 00       	mov    eax,0x0
    12f5:	e8 16 fe ff ff       	call   1110 <__fprintf_chk@plt>
    12fa:	e8 b1 fd ff ff       	call   10b0 <abort@plt>
    12ff:	48 8d 0d 46 0d 00 00 	lea    rcx,[rip+0xd46]          # 204c "Too small"
    1306:	48 8d 15 3b 0d 00 00 	lea    rdx,[rip+0xd3b]          # 2048 "%s"
    130d:	be 01 00 00 00       	mov    esi,0x1
    1312:	48 8b 3d 27 2d 00 00 	mov    rdi,QWORD PTR [rip+0x2d27]        # 4040 <stderr@GLIBC_2.2.5>
    1319:	b8 00 00 00 00       	mov    eax,0x0
    131e:	e8 ed fd ff ff       	call   1110 <__fprintf_chk@plt>
    1323:	e8 88 fd ff ff       	call   10b0 <abort@plt>
    1328:	48 8b 0d 11 2d 00 00 	mov    rcx,QWORD PTR [rip+0x2d11]        # 4040 <stderr@GLIBC_2.2.5>
    132f:	ba 0e 00 00 00       	mov    edx,0xe
    1334:	be 01 00 00 00       	mov    esi,0x1
    1339:	48 8d 3d 2d 0d 00 00 	lea    rdi,[rip+0xd2d]          # 206d "Destiny"
    1340:	e8 bb fd ff ff       	call   1100 <fwrite@plt>
    1345:	e8 66 fd ff ff       	call   10b0 <abort@plt>
    134a:	e8 71 fd ff ff       	call   10c0 <__stack_chk_fail@plt>
    134f:	90                   	nop

0000000000001350 <__libc_csu_init>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	41 57                	push   r15
    1356:	4c 8d 3d 2b 2a 00 00 	lea    r15,[rip+0x2a2b]        # 3d88 <__frame_dummy_init_array_entry>
    135d:	41 56                	push   r14
    135f:	49 89 d6             	mov    r14,rdx
    1362:	41 55                	push   r13
    1364:	49 89 f5             	mov    r13,rsi
    1367:	41 54                	push   r12
    1369:	41 89 fc             	mov    r12d,edi
    136c:	55                   	push   rbp
    136d:	48 8d 2d 1c 2a 00 00 	lea    rbp,[rip+0x2a1c]        # 3d90 <__do_global_dtors_aux_fini_array_entry>
    1374:	53                   	push   rbx
    1375:	4c 29 fd             	sub    rbp,r15
    1378:	48 83 ec 08          	sub    rsp,0x8
    137c:	e8 7f fc ff ff       	call   1000 <_init>
    1381:	48 c1 fd 03          	sar    rbp,0x3
    1385:	74 1f                	je     13a6 <__libc_csu_init+0x56>
    1387:	31 db                	xor    ebx,ebx
    1389:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1390:	4c 89 f2             	mov    rdx,r14
    1393:	4c 89 ee             	mov    rsi,r13
    1396:	44 89 e7             	mov    edi,r12d
    1399:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
    139d:	48 83 c3 01          	add    rbx,0x1
    13a1:	48 39 dd             	cmp    rbp,rbx
    13a4:	75 ea                	jne    1390 <__libc_csu_init+0x40>
    13a6:	48 83 c4 08          	add    rsp,0x8
    13aa:	5b                   	pop    rbx
    13ab:	5d                   	pop    rbp
    13ac:	41 5c                	pop    r12
    13ae:	41 5d                	pop    r13
    13b0:	41 5e                	pop    r14
    13b2:	41 5f                	pop    r15
    13b4:	c3                   	ret    
    13b5:	66 66 2e 0f 1f 84 00 	data16 cs nop WORD PTR [rax+rax*1+0x0]
    13bc:	00 00 00 00 

00000000000013c0 <__libc_csu_fini>:
    13c0:	f3 0f 1e fa          	endbr64 
    13c4:	c3                   	ret    

Disassembly of section .fini:

00000000000013c8 <_fini>:
    13c8:	f3 0f 1e fa          	endbr64 
    13cc:	48 83 ec 08          	sub    rsp,0x8
    13d0:	48 83 c4 08          	add    rsp,0x8
    13d4:	c3                   	ret    
